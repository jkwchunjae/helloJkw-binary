@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<dynamic>
@using helloJkw;
@{
	Layout = "Layout.cshtml";
}


<div class="section utils">
	<div class="util-item">
		@*<span class="util-name">칸수</span>*@
		<div id="div-size" class="btn-group" data-toggle="buttons">
			<label class="btn btn-success active">
				<input type="radio" name="board-size" value="19" checked="checked" /> 19칸
			</label>
			<label class="btn btn-success">
				<input type="radio" name="board-size" value="13" /> 13칸
			</label>
			<label class="btn btn-success">
				<input type="radio" name="board-size" value="9" /> 9칸
			</label>
		</div>
	</div>
	<div class="util-item">
		@*<span class="util-name">돌 변경 방법</span>*@
		<div id="div-changeMode" class="btn-group" data-toggle="buttons">
			<label class="btn btn-info active" title="바둑돌이 자동으로 바뀝니다. 우클릭으로 취소합니다.">
				<input type="radio" name="stone-change-mode" value="0" checked="checked" /> 자동
			</label>
			<label class="btn btn-info" title="돌 색을 수동으로 지정해야 합니다. 우클릭으로 취소합니다.">
				<input type="radio" name="stone-change-mode" value="1" /> 수동
			</label>
		</div>
	</div>
	<div class="util-item">
		@*<span class="util-name">돌 색</span>*@
		<div id="div-stoneColor" class="btn-group" data-toggle="buttons">
			<label class="btn btn-default active">
				<input type="radio" name="stone-color" value="1" checked="checked" />
				<img src="/jkw/games/Baduk/black-go-stone24.png" />
			</label>
			<label class="btn btn-default">
				<input type="radio" name="stone-color" value="2" />
				<img src="/jkw/games/Baduk/white-go-stone24.png" />
			</label>
		</div>
	</div>
	<div class="util-item">
		<div id="div-refresh" class="btn-group">
			<button type="button" id="refresh" class="btn btn-default">초기화</button>
			<button type="button" id="remove-stone" class="btn btn-default">판비우기</button>
		</div>
	</div>
	@if (Model.isLogin)
	{
	<div class="util-item input-group">
		<input type="text" id="text-subject" class="form-control" placeholder="제목"/>
		<span class="input-group-btn">
			<button type="button" class="btn btn-default" id="btn-save">저장</button>
		</span>
	</div>
	@*<div class="util-item">
		<button type="button" class="btn btn-default" id="btn-propose">건의하기</button>
	</div>*@
	<div class="util-item">
		<span style="font-size: 1.2em; font-weight: bold;">저장목록</span>
		<ul id="savelist">
		</ul>
	</div>
	}
	else
	{
	<div class="util-item">
	로그인하면 저장기능을 사용할 수 있습니다.
	</div>
	}
</div>

<div class="section board-section">
	<div class="board">
	</div>
	<div class="board-control">
		<div class="board-navigate">
			<div class="input-group" role="group">
				<div class="input-group-btn">
					<button type="button" class="btn btn-default btn-navi" data-offset="-1">&lt;</button>
					<button type="button" class="btn btn-default btn-navi" data-offset="-5">&lt; 5</button>
				</div>
				<input type="text" class="form-control" name="board-index" readonly="readonly" />
				<div class="input-group-btn">
					<button type="button" class="btn btn-default btn-navi" data-offset="5">5 &gt;</button>
					<button type="button" class="btn btn-default btn-navi" data-offset="1">&gt;</button>
				</div>
			</div>
		</div>
		<div class="board-info">
			<div class="input-group" role="group" style="width: 210px;">
				<div class="input-group-btn">
					<div class="dead-stone">
						<img src="/jkw/games/Baduk/black-go-stone24.png" />
						<span class="badge" id="dead-count-black">3</span>
					</div>
					<div class="dead-stone">
						<img src="/jkw/games/Baduk/white-go-stone24.png" />
						<span class="badge" id="dead-count-white">3</span>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@if (Model.isLogin)
{
<div class="section memo-section">
	<textarea id="text-memo" placeholder="메모: 각 파일별로 저장됩니다." style="width: 400px;display:block;margin-bottom: 10px; height: 500px;"></textarea>
</div>
}

@section Css
{
	<link href="/Static/css/baduk.css" rel="stylesheet" />
}

@section Javascript
{
<script type="text/javascript" src="/Static/js/linq.js_ver2.2.0.2/linq.js"></script>
<script type="text/javascript" src="/Static/js/linq.js_ver2.2.0.2/jquery.linq.js"></script>
<script type="text/javascript">

	var changeFlag = false

	window.onbeforeunload = function () {
		if (changeFlag) {
			return "페이지를 나오면 현재 데이터를 잃게 됩니다."
		}
	}

$(function () {
	var enumStoneChangeMode = {
		Auto: 0, Manual: 1
	}
	var enumStoneColor = {
		None: 0, Black: 1, White: 2
	}
	var enumStoneAction = {
		Set: 0, Remove: 1
	}

	var util = {
		BoardSize: 19,
		StoneChangeMode: enumStoneChangeMode.Auto,
		StoneColor: enumStoneColor.Black,
		SetColor: function (color) {
			switch (color) {
				case enumStoneColor.Black:
					util.StoneColor = enumStoneColor.Black
					$('input[name="stone-color"][value="' + enumStoneColor.Black + '"]').parent().addClass('active')
					$('input[name="stone-color"][value="' + enumStoneColor.White + '"]').parent().removeClass('active')
					break;
				case enumStoneColor.White:
					util.StoneColor = enumStoneColor.White
					$('input[name="stone-color"][value="' + enumStoneColor.Black + '"]').parent().removeClass('active')
					$('input[name="stone-color"][value="' + enumStoneColor.White + '"]').parent().addClass('active')
					break;
			}
		}
	}

	var record = {
		currentIndex: 0,
		indexMaximum: 0,
		stoneLog: [],
		currentBoard: [],
		deadStone: [],

		Init : function(){
			record.currentIndex = 0
			record.indexMaximum = 0
			record.stoneLog = []
			record.currentBoard = []

			record.SetDeadStone(enumStoneColor.Black, 0)
			record.SetDeadStone(enumStoneColor.White, 0)
			record.SetCurrentIndex(0)
		},

		SetCurrentIndex: function (index) {
			record.currentIndex = index
			$('input[name=board-index]').val(record.currentIndex + ' / ' + record.indexMaximum)
		},

		IncreaseDeadStone: function (color) {
			record.SetDeadStone(color, record.deadStone[color] + 1)
		},

		DecreaseDeadStone: function (color) {
			record.SetDeadStone(color, record.deadStone[color] - 1)
		},

		SetDeadStone: function (color, count) {
			record.deadStone[color] = count
			var deadCountBadge = color == enumStoneColor.Black ? $('#dead-count-black') : $('#dead-count-white')
			$(deadCountBadge).text(count)
		}
	}

	$('input[name="board-size"]').change(function () {
		util.BoardSize = parseInt($(this).val(), 10)
		drawBlankBoard(util.BoardSize, false)
	})
	$('input[name="stone-change-mode"]').change(function () {
		util.StoneChangeMode = parseInt($(this).val(), 10)
	})
	$('input[name="stone-color"]').change(function () {
		util.StoneColor = parseInt($(this).val(), 10)
	})

	drawBlankBoard(util.BoardSize, false)

	$(document).on('click', 'td.board-cell', function () {
		var rowIndex = parseInt($(this).attr('data-row'), 10)
		var columnIndex = parseInt($(this).attr('data-column'), 10)

		var currentColor = record.currentBoard[rowIndex][columnIndex]
		if (currentColor != enumStoneColor.None) {
			RemoveStone(rowIndex, columnIndex, currentColor)
			record.IncreaseDeadStone(currentColor)
			record.indexMaximum = record.currentIndex
		} else {
			SetStone(rowIndex, columnIndex, util.StoneColor)
			record.indexMaximum = record.currentIndex

			if (util.StoneChangeMode == enumStoneChangeMode.Auto) {
				util.SetColor(util.StoneColor == enumStoneColor.White ? enumStoneColor.Black : enumStoneColor.White)
			}
		}

		changeFlag = true
	})

	$(document).on('contextmenu', 'td.board-cell', function () {
		var rowIndex = parseInt($(this).attr('data-row'), 10)
		var columnIndex = parseInt($(this).attr('data-column'), 10)

		var currentColor = record.currentBoard[rowIndex][columnIndex]
		if (currentColor == enumStoneColor.None)
			return false

		RemoveStone(rowIndex, columnIndex, currentColor)
		record.IncreaseDeadStone(currentColor)
		record.indexMaximum = record.currentIndex
		changeFlag = true
		return false
	})

	function SetStone(row, column, stoneColor) {
		record.stoneLog[++record.currentIndex] = {
			row: row,
			column: column,
			stoneAction: enumStoneAction.Set,
			color: stoneColor
		}
		record.indexMaximum = record.currentIndex
		SetStoneRaw(row, column, stoneColor)
	}

	function SetStoneRaw(row, column, stoneColor) {
		record.currentBoard[row][column] = stoneColor
		var td = $('td[data-row="' + row + '"][data-column="' + column + '"]')
		var imgBlack = $(td).find('img.stone-black')
		var imgWhite = $(td).find('img.stone-white')
		switch (stoneColor) {
			case enumStoneColor.Black:
				$(imgBlack).css('display', 'block')
				$(imgWhite).css('display', 'none')
				break;
			case enumStoneColor.White:
				$(imgBlack).css('display', 'none')
				$(imgWhite).css('display', 'block')
				break;
		}

		record.SetCurrentIndex(record.currentIndex)
	}

	function RemoveStone(row, column, stoneColor) {
		record.stoneLog[++record.currentIndex] = {
			row: row,
			column: column,
			stoneAction: enumStoneAction.Remove,
			color: stoneColor
		}
		record.indexMaximum = record.currentIndex
		RemoveStoneRaw(row, column)
	}

	function RemoveStoneRaw(row, column) {
		record.currentBoard[row][column] = enumStoneColor.None
		var td = $('td[data-row="' + row + '"][data-column="' + column + '"]')
		$(td).find('img.stone-black').css('display', 'none')
		$(td).find('img.stone-white').css('display', 'none')

		record.SetCurrentIndex(record.currentIndex)
	}

	$(document).on('click', 'button.btn-navi', function () {
		var offset = parseInt($(this).attr('data-offset'))
		if (offset < 0) {
			for (var i = record.currentIndex; i > Math.max(0, record.currentIndex + offset); i--) {
				var currentLog = record.stoneLog[i]
				switch (currentLog.stoneAction) {
					case enumStoneAction.Set:
						RemoveStoneRaw(currentLog.row, currentLog.column)
						break;
					case enumStoneAction.Remove:
						SetStoneRaw(currentLog.row, currentLog.column, currentLog.color)
						record.DecreaseDeadStone(currentLog.color)
						break;
				}
			}
			record.currentIndex = Math.max(0, record.currentIndex + offset)
		} else {
			for (var i = record.currentIndex + 1; i <= Math.min(record.indexMaximum, record.currentIndex + offset); i++) {
				var currentLog = record.stoneLog[i]
				switch (currentLog.stoneAction) {
					case enumStoneAction.Set:
						SetStoneRaw(currentLog.row, currentLog.column, currentLog.color)
						break;
					case enumStoneAction.Remove:
						RemoveStoneRaw(currentLog.row, currentLog.column)
						record.IncreaseDeadStone(currentLog.color)
						break;
				}
			}
			record.currentIndex = Math.min(record.indexMaximum, record.currentIndex + offset)
		}

		if (util.StoneChangeMode == enumStoneChangeMode.Auto) {
			if (record.currentIndex == 0) {
				util.SetColor(enumStoneColor.Black)
			} else {
				util.SetColor(record.stoneLog[record.currentIndex].color == enumStoneColor.Black ? enumStoneColor.White : enumStoneColor.Black)
			}
		}
		record.SetCurrentIndex(record.currentIndex)
	})

	function drawBlankBoard(size, askReset) {
		var pointArray = new Array()
		pointArray[19] = [4, 10, 16]
		pointArray[13] = [4, 7, 10]
		pointArray[9] = [5]

		$('table#board').remove()
		$('#text-memo').val('')
		$('#text-subject').val('')
		record.Init()

		var table = document.createElement('table')
		$(table).attr('id', 'board')
		record.currentBoard = new Array()
		for (var row = 1; row <= size; row++) {
			record.currentBoard[row] = new Array()

			var tr = document.createElement('tr')
			var flagTop = row == 1 ? '1' : '0';
			var flagBottom = row == size ? '1' : '0';
			var flagPointRow = Enumerable.From(pointArray[size]).Where('x => x == ' + row).Count() == 0 ? false : true

			for (var column = 1; column <= size; column++) {
				record.currentBoard[row][column] = enumStoneColor.None

				var td = document.createElement('td')
				$(td).addClass('board-cell')
				$(td).attr({ 'data-row': row, 'data-column': column })
				var flagLeft = column == 1 ? '1' : '0';
				var flagRight = column == size ? '1' : '0';
				var flagBoard = flagLeft + flagTop + flagRight + flagBottom;
				var flagPointColumn = Enumerable.From(pointArray[size]).Where('x => x == ' + column).Count() == 0 ? false : true
				var flagPoint = (flagPointRow && flagPointColumn) ? '_point' : ''

				var img = document.createElement('img')
				$(img).addClass('image-stone')
				$(img).attr('src', '/jkw/games/Baduk/baduk_board_' + flagBoard + flagPoint + '.png')
				var stoneImgBlack = document.createElement('img')
				$(stoneImgBlack).addClass('image-stone stone-black')
				$(stoneImgBlack).attr('src', '/jkw/games/Baduk/black-go-stone24.png')
				$(stoneImgBlack).css({ 'position': 'absolute', 'display': 'none' })
				var stoneImgWhite = document.createElement('img')
				$(stoneImgWhite).addClass('image-stone stone-white')
				$(stoneImgWhite).attr('src', '/jkw/games/Baduk/white-go-stone24.png')
				$(stoneImgWhite).css({ 'position': 'absolute', 'display': 'none' })
				$(td).append(stoneImgBlack)
				$(td).append(stoneImgWhite)
				$(td).append(img)
				$(tr).append(td)
			}
			$(table).append(tr)
		}
		$('div.board').append(table)

		changeFlag = false
	}

	$('#refresh').click(function () {
		if (changeFlag) {
			if (!confirm('계속 하면 현재 데이터를 잃게 됩니다. 계속하시겠습니까?')) {
				return;
			}
		}

		$('div#div-size input[value="' + 19 + '"]').closest('.btn').button('toggle')
		$('div#div-changeMode input[value="' + enumStoneChangeMode.Auto + '"]').closest('.btn').button('toggle')
		$('div#div-stoneColor input[value="' + enumStoneColor.Black + '"]').closest('.btn').button('toggle')

		util.BoardSize = 19
		util.StoneChangeMode = enumStoneChangeMode.Auto
		util.StoneColor = enumStoneColor.Black

		drawBlankBoard(util.BoardSize, false)
	})

	$('#remove-stone').click(function () {
		if (changeFlag) {
			if (!confirm('계속 하면 현재 데이터를 잃게 됩니다. 계속하시겠습니까?')) {
				return;
			}
		}

		drawBlankBoard(util.BoardSize, false)
	})

	$('#btn-save').click(function () {
		SaveData(0)
	})

	function SaveData(confirm) {
		$.post('/games/Baduk/save',
		{
			subject: $('#text-subject').val(),
			size: util.BoardSize,
			changeMode: util.StoneChangeMode,
			currentColor: util.StoneColor,
			currentIndex: record.currentIndex,
			indexMaximum: record.indexMaximum,
			memo: $('#text-memo').val(),
			stoneLog: JSON.stringify(record.stoneLog),
			confirm: confirm
		},
		function (json) {
			var data = JSON.parse(json)
			if (data.Status == 'success') {
				showAlert(data.Message)
				changeFlag = false
				loadSaveList()
			}
			else if (data.Status == 'fail') {
				showAlert(data.Message)
			}
			else if (data.Status == 'confirm') {
				if (window.confirm(data.Message)) {
					SaveData(1)
				}
			}
		})
	}

	$(document).on('click', 'ul#savelist li a', function () {
		if (changeFlag) {
			if (!confirm('계속 하면 현재 데이터를 잃게 됩니다. 계속하시겠습니까?')) {
				return;
			}
		}

		var subject = $(this).text()
		$.post('/games/Baduk/loaddata', 
		{
			subject: subject
		},
		function (json) {
			var data = JSON.parse(json)
			if (data.Status == 'success') {
				var data = JSON.parse(data.JsonText)

				$('div#div-size input[value="' + data.Size + '"]').closest('.btn').button('toggle')
				$('div#div-changeMode input[value="' + data.ChangeMode + '"]').closest('.btn').button('toggle')
				$('div#div-stoneColor input[value="' + data.CurrentColor + '"]').closest('.btn').button('toggle')

				util.BoardSize = data.Size
				util.StoneChangeMode = data.ChangeMode
				util.StoneColor = data.CurrentColor

				drawBlankBoard(util.BoardSize, false)

				for (var i = 0; i < data.CurrentIndex; i++) {
					var logData = data.StoneLog[i]
					switch (logData.Action) {
						case enumStoneAction.Set:
							SetStone(logData.Row, logData.Column, logData.Color)
							break;
						case enumStoneAction.Remove:
							RemoveStone(logData.Row, logData.Column, logData.Color)
							record.IncreaseDeadStone(logData.Color)
							break;
					}
				}

				for (var i = data.CurrentIndex; i < data.StoneLog.length; i++) {
					var logData = data.StoneLog[i]
					record.stoneLog[i + 1] = {
						row: logData.Row,
						column: logData.Column,
						stoneAction: logData.Action,
						color: logData.Color,
					}
				}

				record.indexMaximum = data.IndexMaximum
				record.SetCurrentIndex(data.CurrentIndex)

				$('input#text-subject').val(data.Subject)
				$('#text-memo').val(data.Memo)

				changeFlag = false
			}
			else if (data.Status == 'fail') {
				showAlert(data.Message)
			}
		})
	})

	$(document).on('click', 'i.favorite-subject', function () {
		var favorite = $(this).attr('data-favorite') == 'true'
		$.post('/games/Baduk/favorite',
		{
			subject: $(this).attr('data-subject'),
			favorite: !favorite
		},
		function (json) {
			var result = JSON.parse(json)
			if (result.Status == 'success') {
				loadSaveList()
			} else {
				showAlert(result.Message)
			}
		})
	})

	$(document).on('mouseover', 'ul#savelist > li', function () {
		$(this).find('div.div-trash').css('display', 'inline')
	})
	.on('mouseout', 'ul#savelist > li', function () {
		$(this).find('div.div-trash').css('display', 'none')
	})
	.on('click', 'i.delete-data', function () {
		if (confirm('삭제하시겠습니까?')) {
			$.post('/games/Baduk/delete',
			{
				subject: $(this).attr('data-subject')
			},
			function (json) {
				var result = JSON.parse(json)
				if (result.Status == 'success') {
					loadSaveList()
					showAlert('삭제되었습니다')
				} else {
					showAlert(result.Message)
				}
			})
		}
	})

	function loadSaveList() {
		$.post('/games/Baduk/loadsavelist',
		{
		},
		function (json) {
			var list = JSON.parse(json)
			$('ul#savelist').html('')

			for (var i = 0; i < list.length; i++) {
				var star = document.createElement('i')
				$(star).attr('data-subject', list[i].Subject)
				$(star).attr('data-favorite', list[i].Favorite)
				$(star).addClass('fa').addClass('favorite-subject').css('cursor', 'pointer')
				if (list[i].Favorite) {
					$(star).addClass('fa-star').addClass('star')
				} else {
					$(star).addClass('fa-star-o').addClass('unstar')
				}
				var div = document.createElement('div')
				$(div).css('display', 'inline')
				$(div).append(star)
				var a = document.createElement('a')
				$(a).text(list[i].Subject).attr('href', '#')

				var trash = document.createElement('i')
				$(trash).addClass('fa').addClass('fa-trash-o').addClass('delete-data')
					.css('cursor', 'pointer')
					.attr('data-subject', list[i].Subject)
				var div2 = document.createElement('div')
				$(div2).css('display', 'none').css('margin-left', '10px').addClass('div-trash')
				$(div2).append(trash)

				var li = document.createElement('li')
				$(li).append(div).append(a).append(div2)
				$('ul#savelist').append(li)
			}
		})
	}

	loadSaveList()

	$('#text-memo').keydown(function () {
		changeFlag = true
	})
})


</script>
}

@section JavascriptRelease
{
}