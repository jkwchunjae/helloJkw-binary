@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<dynamic>
@{
	Layout = "Layout.cshtml";
	string serverAddress = Model.isDebug ? "http://localhost:55591/colorconquer" : "http://hellojkw.com:55591/colorconquer";
	//string serverAddress = true ? "ws://localhost:55591/colorconquer" : "ws://hellojkw.com:55591/colorconquer";
	string playerId = Model.isLogin ? Model.user.Id : "";
	string playerName = Model.isLogin && !Model.isDebug ? "'" + Model.user.Name + "'" : "'User' + Math.round(Math.random() * 1000)";
	string playerImage = Model.isLogin ? Model.user.ImageUrl : "";
}

<div class="playground" ng-app="app-color-conquer" ng-controller="controller-color-conquer">
	<div class="place" id="channel">
		<div class="form-inline" id="new-room">
			<input type="text" class="form-control" id="new-room-name" placeholder="방 제목"/>
			<button class="btn btn-success" id="create-room">방 만들기</button>
		</div>
		<ul id="room-list">
			<li class="room" ng-repeat="room in roomList">
				<div class="room-name">{{room.roomName}}</div>
				<button class="btn btn-info btn-sm enter-room" ng-click="enterRoom(room.roomName)">참여!</button>
				<button class="btn btn-warning btn-sm enter-room" ng-click="enterRoomMonitor(room.roomName)">관전!</button>
			</li>
		</ul>
	</div>
	<div class="place" id="room">
		<div class="col-md-8" id="room-left">
			<div id="game-status">
				<span class="username-status" id="alice-name">{{AliceName}}</span>
				<img class="userlist-image" src="{{AliceImage}}" />
				<span>{{AliceScore}}</span>
				<span> : </span>
				<span>{{BobScore}}</span>
				<img class="userlist-image" src="{{BobImage}}" />
				<span class="username-status" id="bob-name">{{BobName}}</span>
			</div>
			<div id="game-board">
			</div>
		</div>
		<div class="col-md-4" id="room-right">
			<div class="row">
				<h3 class="room-name">{{roomName}}</h3>
				<button class="btn btn-xs btn-danger" ng-click="leaveRoom()">나가기</button>
			</div>
			<div class="row" id="start-game-section">
				<div class="col-xs-8">
					<input type="number" class="form-control" id="size" ng-model="size" placeholder="게임판의 크기" />
					@*<input type="number" class="form-control" id="countColor" ng-model="countColor" placeholder="게임의색 종류" />*@
				</div>
				<button class="btn btn-default col-xs-4" ng-click="startGame()">게임시작</button>
			</div>
			<div class="row" id="game-control">
				<button class="btn btn-warning" ng-click="giveupGame()">기권</button>
			</div>
			<div class="row">
			<ul id="user-list">
				<li class="user" ng-repeat="user in userList">
					<img class="userlist-image" src="{{user.userImage}}"/>
					{{user.userName}}
				</li>
			</ul>
			</div>
		</div>
	</div>
</div>
<div id="console">

</div>

@section Css
{
	<link href="/Static/css/gameColorConquer.css" rel="stylesheet" />
<style type="text/css">
	#console {
		position: fixed;
		top: 80px;
		left: 60%;
		width: 35%;
		z-index: -1;
	}
</style>
}

@section Javascript
{
<script src="/Static/js/jquery.signalR-2.0.3.min.js"></script>
<script src="@serverAddress/hubs"></script>
<script type="text/javascript">
	$("nav.navbar").addClass("navbar-shrink");
	$("li#menu-games").addClass("active");
	var player = {
		id: '',
		name: '',
		image: '',
		isPlayer: false,
		isGameRunning: false
	};

	var ColorSet = new Array();
	ColorSet['A'] = '#DBB7EE';
	ColorSet['B'] = '#F8CBAD';
	ColorSet['C'] = '#FFE699';
	ColorSet['D'] = '#C6E0B4';
	ColorSet['E'] = '#FF9595';
	ColorSet['F'] = '#DBDBDB';

	var app = angular.module('app-color-conquer', []);
	app.controller('controller-color-conquer', function ($scope) {

		$.connection.hub.url = '@serverAddress';
		var game = $.connection.colorConquerHub;

		game.client.ServerToClient = function (data) {
			Log('recv: ' + data);
			var obj = JSON.parse(data);
			processPacket(obj);
		};

		$.connection.hub.start().done(function () {
			player.id = '@playerId';
			player.name = @playerName @* playerName 은 'User' + random 형식 때문에 ' 를 붙이지 않고 그대로 대입 *@
			player.image = '@playerImage';
			$scope.login(player.id, player.name, player.image);
		});

		$.connection.hub.disconnected(function () {
			showAlert('서버와의 접속이 끊겼습니다.');
			player.isGameRunning = false;
			Log('close: ' + $.connection.hub.state);
		});

		var sendMessage = function (obj) {
			var data = JSON.stringify(obj);
			Log('send: ' + data);
			game.server.clientToServer(data);
		};

		var changeUserPlace = function (place) {
			$('.place').css('display', 'none');
			$('#' + place).css('display', 'block');
			$('#game-control').css('display', 'none');
		};

		$scope.login = function (userId, userName, userImage) {
			if (userName == '') {
				showAlert('이름을 입력하세요.');
				return;
			}
			var message = {
				packetType: 'TryEnterChannel',
				userId: userId,
				userName: userName,
				userImage: userImage
			};
			sendMessage(message);
		}

		$scope.enterRoom = function (roomName) {
			var message = {
				packetType: 'TryEnterRoom',
				roomName: roomName
			};
			sendMessage(message);
		};

		$scope.enterRoomMonitor = function (roomName) {
			var message = {
				packetType: 'TryEnterRoomMonitor',
				roomName: roomName
			};
			sendMessage(message);
		};

		$scope.leaveRoom = function () {
			var message = {
				packetType: 'TryLeaveRoom'
			};
			sendMessage(message);
		};

		$scope.giveupGame = function () {
			var message = {
				packetType: 'GiveupGame'
			};
			sendMessage(message);
		};

		$scope.startGame = function () {
			var message = {
				packetType: 'TryStartGame',
				size: $scope.size
				@*countColor: $scope.countColor*@
			};
			sendMessage(message);
		};

		var Log = function (message) {
			@if (@Model.isDebug) {
				string script = @"
			var p = document.createElement('p');
			$(p).text(message);
			$('#console').prepend(p);";
				@script
			}
		};

		@*
		ws.onopen = function (e) {
			player.id = '@playerId';
			player.name = @playerName // playerName 은 'User' + random 형식 때문에 ' 를 붙이지 않고 그대로 대입
			player.image = '@playerImage';
			$scope.login(player.id, player.name, player.image);
		};

		ws.onmessage = function (e) {
			Log('recv: ' + e.data);
			var obj = JSON.parse(e.data);
			processPacket(obj);
		};

		ws.onerror = function (e) {
			$('div.playground').css('display', 'none');
			$('div#console').hide();
			showAlert('준비중입니다.');
			Log('error: ' + e.message);
		};

		ws.onclose = function (e) {
			showAlert('서버와의 접속이 끊겼습니다.');
			player.isGameRunning = false;
			Log('close: ' + e.code + ', ' + e.reason);
		};

		var sendMessage = function (obj) {
			var data = JSON.stringify(obj);
			Log('send: ' + data);
			ws.send(data);
		};
		*@

		$("#create-room").click(function () {
			var roomName = $('#new-room-name').val();
			var obj = {
				packetType: 'TryCreateRoom',
				roomName: roomName
			};
			sendMessage(obj);
		});

		var processPacket = function (obj) {
			switch (obj.packetType) {
				case 'ResultEnterChannel':
					ResultEnterChannel(obj.data);
					break;
				case 'ResultRoomList':
					ResultRoomList(obj.data);
					break;
				case 'ResultEnterRoom':
					ResultEnterRoom(obj.data);
					break;
				case 'ResultEnterRoomMonitor':
					ResultEnterRoomMonitor(obj.data);
					break;
				case 'ResultLeaveRoom':
					ResultLeaveRoom(obj.data);
				case 'UserList':
					RecvUserList(obj.data);
					break;
				case 'ResultStartGame':
					ResultStartGame(obj.data);
					break;
				case 'ResultClickCell':
					ResultClickCell(obj.data);
					break;
				case 'GameStatus':
					SetBoard(obj.data.size, obj.data.cellsColor, obj.data);
					break;
				case 'GameFinished':
					GameFinished(obj.data);
					break;
			}
		};

		var RequestRoomList = function () {
			var obj = {
				packetType: 'RequestRoomList'
			};
			sendMessage(obj);
		};

		var ResultEnterChannel = function (data) {
			if (data.result == 'false') {
				showAlert('채널 입장에 실패하였습니다.')
				return;
			}
			changeUserPlace('channel');
			showAlert(data.userName + '님 안녕하세요!');
			RequestRoomList();
		};

		var ResultRoomList = function (data) {
			$scope.roomList = [];
			$.each(data, function (index, room) {
				$scope.roomList.push({ roomName: room.roomName });
			});
			$scope.$apply();
		};

		var ResultEnterRoom = function (data) {
			if (data.result == 'false') {
				showAlert('방 입장에 실패하였습니다.');
				return;
			}
			changeUserPlace('room');
			$scope.roomName = data.roomName;
			$scope.$apply();
			showAlert(data.roomName + '방에 입장하였습니다.');
		};

		var ResultEnterRoomMonitor = function (data) {
			if (data.result == 'false') {
				showAlert('방 입장에 실패하였습니다.');
				return;
			}
			changeUserPlace('room');
			$scope.roomName = data.roomName;
			$scope.$apply();
			showAlert(data.roomName + '방에 입장하였습니다.');
		};

		var ResultLeaveRoom = function (data) {
			if (data.result == 'false') {
				showAlert('방 나가기에 실패하였습니다.');
				return;
			}
			$('div#game-board .row').remove();
			ResultEnterChannel(data);
		};

		var RecvUserList = function (data) {
			$scope.userList = [];
			$('#start-game-section').css('display', 'none');
			$.each(data, function (index, user) {
				$scope.userList.push({ userName: user.userName, userImage: user.userImage });

				if (user.userType == 'Alice') {
					if ($scope.BobName == user.userName) {
						var tmp = $scope.BobScore;
						$scope.BobScore = $scope.AliceScore;
						$scope.AliceScore = tmp;
					}
					$scope.AliceName = user.userName;
					$scope.AliceImage = user.userImage;
				} else if (user.userType == 'Bob') {
					$scope.BobName = user.userName;
					$scope.BobImage = user.userImage;
				}

				if (user.userType == 'Alice' && user.userName == player.name) {
					$('#start-game-section').css('display', 'block');
					player.isPlayer = true;
				} else if (user.userType == 'Bob' && user.userName == player.name) {
					player.isPlayer = true;
				}
			});
			$scope.$apply();
		};

		var ResultStartGame = function (data) {
			if (data.result == 'false') {
				showAlert(data.failureMessage);
				return;
			}
			$('#game-control').css('display', 'block');
			player.isGameRunning = true;
			SetBoard(data.size, data.cellsColor, data);
		};

		var ResultClickCell = function (data) {
			if (data.result == 'false') {
				showAlert(data.failureMessage);
				//showAlert('선택이 잘못되었습니다. 다른 색을 누르세요!');
				return;
			}
			SetBoard(data.size, data.cellsColor, data);
			if (data.currentTurnName == player.name) {
				showAlert(player.name + '님 차례입니다.');
			}
		};

		var SetBoard = function (size, cellsColor, data) {
			$('div#game-board .row').remove();
			for (var row = 0; row < size; row++) {
				var divRow = document.createElement('div');
				$(divRow).addClass('row');
				for (var col = 0; col < size; col++) {
					var cell = document.createElement('div');
					var color = data.bobName == player.name ? cellsColor[size - row - 1][size - col - 1] : cellsColor[row][col];
					$(cell).addClass('cell').addClass(color);
					$(cell).attr('data-color', color);
					if (data.currentTurnName == player.name) {
						$(cell).css('cursor', 'pointer');
						$(cell).click(function () {
							var obj = {
								packetType: 'ClickCell',
								color: $(this).attr('data-color')
							};
							sendMessage(obj);
						});
					}
					$(divRow).append(cell);
				} // for col
				$('div#game-board').append(divRow);
			} // for row
			SetColor();
			SetScore(data.aliceScore, data.bobScore);
			SetUserColor(data);
		};

		var SetColor = function () {
			for (var color in ColorSet) {
				$('div#game-board div.' + color).css('background-color', ColorSet[color]);
			}
		};

		var SetScore = function (aliceScore, bobScore) {
			$scope.AliceScore = aliceScore;
			$scope.BobScore = bobScore;
			$scope.$apply();
		};

		var SetUserColor = function (data) {
			$('.username-status').css('background-color', '');
			if (data.currentTurnName == data.aliceName) {
				var color = data.cellsColor[0][0];
				$('#alice-name').css('background-color', ColorSet[color]);
			} else if (data.currentTurnName == data.bobName) {
				var color = data.cellsColor[data.size - 1][data.size - 1];
				$('#bob-name').css('background-color', ColorSet[color]);
			}
		};

		var GameFinished = function (data) {
			$('#game-control').css('display', 'none');
			player.isGameRunning = false;

			if (data.winnerName == player.name) {
				showAlert('이겼습니다! ' + data.winnerScore + ':' + data.loserScore);
			} else if (data.loserName == player.name) {
				showAlert('졌습니다.' + data.winnerScore + ':' + data.loserScore);
			} else {
				showAlert('게임종료. ' + data.winnerName + ' ' + data.winnerScore + ' : ' + data.loserScore + ' ' + data.loserName);
			}
		};
	});

	window.onbeforeunload = function () {
		if (player.isPlayer && player.isGameRunning) {
			return "게임 중 페이지를 나오면 게임에서 패하게 됩니다.";
		}
	};

	$(document).ready(function () {
	});
</script>
}

@section JavascriptRelease
{
}